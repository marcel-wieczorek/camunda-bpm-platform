<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity">
  
  <!-- 
  
  NOTE:
  
  HTIs are stored as update events. For each HTI, there are at least two update 
  events which correspond to two lines in the DB:
     
    * the first line added when the task is started
    * [several lines added when the task is updated]
    * the last line added when the task is ended  
  
  The first part of this file contains the mappings for these update events. 
  
  When querying the DB, we are usually interested in an aggregated 
  representation which combines the data contained in both update events as an individual 
  object. The second part of this file contains aggregation queries which allows retrieving 
  HTIs as single lines / objects.     
    
  -->
  
  <!-- /////////////////// start mappings for HistoricTaskInstanceEvent //////////////////// -->
  
  <resultMap id="historicTaskInstanceEventResultMap" type="org.camunda.bpm.engine.impl.history.event.HistoricTaskInstanceEventEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="timestamp" column="TIMESTAMP_" jdbcType="TIMESTAMP" />
    <result property="name" column="NAME_" jdbcType="VARCHAR" />
    <result property="parentTaskId" column="PARENT_TASK_ID_" jdbcType="VARCHAR" />
    <result property="description" column="DESCRIPTION_" jdbcType="VARCHAR" />
    <result property="owner" column="OWNER_" jdbcType="VARCHAR" />
    <result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR" />
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
    <result property="eventType" column="EVENT_TYPE_" jdbcType="VARCHAR" />
    <result property="deleteReason" column="DELETE_REASON_" jdbcType="VARCHAR" />
    <result property="taskDefinitionKey" column="TASK_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="priority" column="PRIORITY_" jdbcType="INTEGER" />
    <result property="dueDate" column="DUE_DATE_" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <!-- HISTORIC TASK INSTANCE INSERT -->
  
  <insert id="insertHistoricTaskInstance" parameterType="org.camunda.bpm.engine.impl.history.event.HistoricTaskInstanceEventEntity">
      insert into ${prefix}ACT_HI_TASKINST (
        ID_,
        PROC_DEF_ID_,
        PROC_INST_ID_,
        EXECUTION_ID_,
        TIMESTAMP_,
        NAME_,
        PARENT_TASK_ID_,
        DESCRIPTION_,
        OWNER_,
        ASSIGNEE_,
        START_TIME_,
        END_TIME_,
        EVENT_TYPE_,
        DELETE_REASON_,
        TASK_DEF_KEY_,
        PRIORITY_,
        DUE_DATE_
      ) values (
        #{id ,jdbcType=VARCHAR},
        #{processDefinitionId, jdbcType=VARCHAR},
        #{processInstanceId, jdbcType=VARCHAR},
        #{executionId, jdbcType=VARCHAR},
        #{timestamp, jdbcType=TIMESTAMP},
        #{name ,jdbcType=VARCHAR},
        #{parentTaskId ,jdbcType=VARCHAR},
        #{description ,jdbcType=VARCHAR},
        #{owner ,jdbcType=VARCHAR},
        #{assignee ,jdbcType=VARCHAR},
        #{startTime, jdbcType=TIMESTAMP},
        #{endTime, jdbcType=TIMESTAMP},
        #{eventType ,jdbcType=VARCHAR},
        #{deleteReason ,jdbcType=VARCHAR},
        #{taskDefinitionKey ,jdbcType=VARCHAR},
        #{priority, jdbcType=INTEGER},
        #{dueDate, jdbcType=TIMESTAMP}
      )
  </insert>

  <!-- HISTORIC TASK INSTANCE DELETE -->
  
  <delete id="deleteHistoricTaskInstance" parameterType="org.camunda.bpm.engine.impl.history.event.HistoricTaskInstanceEventEntity">
    delete from ${prefix}ACT_HI_TASKINST where ID_ = #{id}
  </delete>

  <!-- /////////////////// start mappings for HistoricTaskInstance //////////////////// -->

  <!-- HISTORIC TASK INSTANCE RESULT MAP -->
  <!-- this is the aggregated HTI -->

  <resultMap id="historicTaskInstanceResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="name" column="NAME_" jdbcType="VARCHAR" />
    <result property="parentTaskId" column="PARENT_TASK_ID_" jdbcType="VARCHAR" />
    <result property="description" column="DESCRIPTION_" jdbcType="VARCHAR" />
    <result property="owner" column="OWNER_" jdbcType="VARCHAR" />
    <result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR" />
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
    <result property="durationInMillis" column="DURATION_" jdbcType="BIGINT" />
    <result property="deleteReason" column="DELETE_REASON_" jdbcType="VARCHAR" />
    <result property="taskDefinitionKey" column="TASK_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="priority" column="PRIORITY_" jdbcType="INTEGER" />
    <result property="dueDate" column="DUE_DATE_" jdbcType="TIMESTAMP" />
  </resultMap>

  <!-- HISTORIC TASK INSTANCE SELECT -->
  
  <select id="selectHistoricTaskInstance" resultMap="historicTaskInstanceResultMap">
    select distinct
      T1.ID_ as ID_,
      T1.PROC_DEF_ID_ as PROC_DEF_ID_,
      T1.PROC_INST_ID_ as PROC_INST_ID_,
      T1.EXECUTION_ID_ as EXECUTION_ID_,
      T1.NAME_ as NAME_,
      T1.PARENT_TASK_ID_ as PARENT_TASK_ID_,
      T1.DESCRIPTION_ as DESCRIPTION_,
      T1.OWNER_ as OWNER_,
      T1.ASSIGNEE_ as ASSIGNEE_,
      T1.START_TIME_ as START_TIME_,
      T2.END_TIME_ as END_TIME_,
      DATEDIFF(ms, T1.TIMESTAMP_ , T2.TIMESTAMP_ ) as DURATION_
      T1.DELETE_REASON_ as DELETE_REASON_,
      T1.TASK_DEF_KEY_ as TASK_DEF_KEY_,
      T1.PRIORITY_ as PRIORITY_,
      T1.DUE_DATE_ as DUE_DATE_
    from ${prefix}ACT_HI_TASKINST T1
      LEFT JOIN 
        ${prefix}ACT_HI_TASKINST T2 
      ON
        T1.ID_ = T2.ID_ 
      AND
        T2.EVENT_TYPE_ = 'end'
    where
      T1.EVENT_TYPE_ = 'start'
    AND T1.ID_ = #{historicTaskInstanceId}
  </select>
  
  <select id="selectHistoricTaskInstanceIdsByProcessInstanceId" resultType="string" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" >
    select ID_ 
    from ${prefix}ACT_HI_TASKINST 
    where PROC_INST_ID_ = #{parameter}
  </select>

  <select id="selectHistoricTaskInstancesByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricTaskInstanceQueryImpl" resultMap="historicTaskInstanceResultMap">
  	${limitBefore}
    select ${limitBetween}
    
    * from (SELECT distinct
      T1.ID_ as ID_,
      T1.PROC_DEF_ID_ as PROC_DEF_ID_,
      T1.PROC_INST_ID_ as PROC_INST_ID_,
      T1.EXECUTION_ID_ as EXECUTION_ID_,
      T1.NAME_ as NAME_,
      T1.PARENT_TASK_ID_ as PARENT_TASK_ID_,
      T1.DESCRIPTION_ as DESCRIPTION_,
      T1.OWNER_ as OWNER_,
      T1.ASSIGNEE_ as ASSIGNEE_,
      T1.START_TIME_ as START_TIME_,
      T2.END_TIME_ as END_TIME_,
      DATEDIFF(ms, T1.TIMESTAMP_ , T2.TIMESTAMP_ ) as DURATION_
      T1.DELETE_REASON_ as DELETE_REASON_,
      T1.TASK_DEF_KEY_ as TASK_DEF_KEY_,
      T1.PRIORITY_ as PRIORITY_,
      T1.DUE_DATE_ as DUE_DATE_
      
    <include refid="selectHistoricTaskInstancesByQueryCriteriaSql"/>
    
    ) RES
    
    ${orderBy}
    ${limitAfter}
  </select>
  
  <select id="selectHistoricTaskInstanceCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricTaskInstanceQueryImpl" resultType="long">
    select count(*)
    <include refid="selectHistoricTaskInstancesByQueryCriteriaSql"/>
  </select>
  
  <sql id="selectHistoricTaskInstancesByQueryCriteriaSql">
    from ${prefix}ACT_HI_TASKINST T1
      LEFT JOIN 
        ${prefix}ACT_HI_TASKINST T2 
      ON
        T1.ID_ = T2.ID_ 
      AND
        T2.EVENT_TYPE_ = 'end'
    <if test="processFinished || processUnfinished">
      inner join ${prefix}ACT_HI_PROCINST HPI ON T1.PROC_INST_ID_ = HPI.ID_
    </if>
    <if test="processDefinitionKey != null || processDefinitionName != null">
      inner join ${prefix}ACT_RE_PROCDEF D on T1.PROC_DEF_ID_ = D.ID_
    </if>
    <where>
    
      T1.EVENT_TYPE_ = 'start'
    
      <if test="taskId != null">
        T1.ID_ = #{taskId}
      </if>
      <if test="processDefinitionId != null">
        and T1.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processDefinitionKey != null">
        and D.KEY_ = #{processDefinitionKey}
      </if>
      <if test="processDefinitionName != null">
        and D.NAME_ = #{processDefinitionName}
      </if>
      <if test="processInstanceId != null">
        and T1.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="taskDefinitionKey != null">
        and T1.TASK_DEF_KEY_ = #{taskDefinitionKey}
      </if>
      <if test="executionId != null">
        and T1.EXECUTION_ID_ = #{executionId}
      </if>
      <if test="taskName != null">
        and T1.NAME_ = #{taskName}
      </if>
      <if test="taskNameLike != null">
        and T1.NAME_ like #{taskNameLike}
      </if>
      <if test="taskParentTaskId != null">
        and T1.PARENT_TASK_ID_ = #{taskParentTaskId}
      </if>
      <if test="taskDescription != null">
        and T1.DESCRIPTION_ = #{taskDescription}
      </if>
      <if test="taskDescriptionLike != null">
        and T1.DESCRIPTION_ like #{taskDescriptionLike}
      </if>
      <if test="taskDeleteReason != null">
        and T1.DELETE_REASON_ = #{taskDeleteReason}
      </if>
      <if test="taskDeleteReasonLike != null">
        and T1.DELETE_REASON_ like #{taskDeleteReasonLike}
      </if>
      <if test="taskOwner != null">
        and T1.OWNER_ = #{taskOwner}
      </if>
      <if test="taskOwnerLike != null">
        and T1.OWNER_ like #{taskOwnerLike}
      </if>
      <if test="taskAssignee != null">
        and T1.ASSIGNEE_ = #{taskAssignee}
      </if>
      <if test="taskAssigneeLike != null">
        and T1.ASSIGNEE_ like #{taskAssigneeLike}
      </if>
      <if test="taskPriority != null">
        and T1.PRIORITY_ = #{taskPriority}
      </if>
      <if test="unfinished">
        and T1.END_TIME_ is null
      </if>
      <if test="finished">
        and T1.END_TIME_ is not null
      </if>
      <if test="processFinished">
        and HPI.END_TIME_ is not null
      </if>
      <if test="processUnfinished">
        and HPI.END_TIME_ is null
      </if>
      <if test="dueDate != null">
        and T1.DUE_DATE_ = #{dueDate}
      </if>
      <if test="dueBefore != null">
        and T1.DUE_DATE_ &lt; #{dueBefore}
      </if>
      <if test="dueAfter != null">
        and T1.DUE_DATE_ &gt; #{dueAfter}
      </if>
      <foreach collection="variables" index="index" item="var">
        and exists (
          select HD.ID_ 
          from ${prefix}ACT_HI_DETAIL HD 
          where
            HD.TYPE_ = 'VariableUpdate' 
            and HD.NAME_ =  #{var.name}
            <choose>
              <when test="var.local">
                and HD.TASK_ID_ = T1.ID_
                and HD.REV_ = (select max(HDM.REV_) from ${prefix}ACT_HI_DETAIL HDM where HDM.TASK_ID_ = T1.ID_ and HDM.VAR_TYPE_ = #{var.type} and HDM.NAME_ = #{var.name} and HDM.TYPE_ = 'VariableUpdate')
                and HD.TIME_ = (select max(HDM.TIME_) from ${prefix}ACT_HI_DETAIL HDM where HDM.TASK_ID_ = T1.ID_ and HDM.VAR_TYPE_ = #{var.type} and HDM.NAME_ = #{var.name} and HDM.TYPE_ = 'VariableUpdate')
              </when>
              <otherwise>
                and HD.PROC_INST_ID_ = T1.PROC_INST_ID_ and HD.TASK_ID_ is null
                and HD.REV_ = (select max(HDM.REV_) from ${prefix}ACT_HI_DETAIL HDM where HDM.PROC_INST_ID_ = T1.PROC_INST_ID_ and HDM.TASK_ID_ is null and HDM.VAR_TYPE_ = #{var.type} and HDM.NAME_ = #{var.name} and HDM.TYPE_ = 'VariableUpdate')
                and HD.TIME_ = (select max(HDM.TIME_) from ${prefix}ACT_HI_DETAIL HDM where HDM.PROC_INST_ID_ = T1.PROC_INST_ID_ and HDM.TASK_ID_ is null and HDM.VAR_TYPE_ = #{var.type} and HDM.NAME_ = #{var.name} and HDM.TYPE_ = 'VariableUpdate')
              </otherwise>
            </choose>  
            <if test="!var.type.equals('null')">
              and HD.VAR_TYPE_ = #{var.type}
            </if>
            <!-- Variable value -->
            <if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
              and HD.TEXT_ =  #{var.textValue}
            </if>
            <if test="var.textValue2 != null">
              and HD.TEXT2_ = #{var.textValue2}
            </if>
            <if test="var.longValue != null">
              and HD.LONG_ = #{var.longValue}
            </if>
            <if test="var.doubleValue != null">
              and HD.DOUBLE_ = #{var.doubleValue}
            </if>
            <!-- Null variable type -->
            <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
              and HD.TEXT_ is null and HD.TEXT2_ is null and HD.LONG_ is null and HD.DOUBLE_ is null and HD.BYTEARRAY_ID_ is null
            </if>
        )
      </foreach>
    </where>
  </sql>

  <select id="selectHistoricTaskInstanceByNativeQuery" parameterType="java.util.Map" resultMap="historicTaskInstanceResultMap">
    <if test="resultType == 'LIST_PAGE'">
      ${limitBefore}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>
  
  <select id="selectHistoricTaskInstanceByNativeQuery_mssql_or_db2" parameterType="java.util.Map" resultMap="historicTaskInstanceResultMap">
    <if test="resultType == 'LIST_PAGE'">
        ${limitBeforeNativeQuery}
    </if>
    ${sql} 
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>

  <select id="selectHistoricTaskInstanceCountByNativeQuery" parameterType="java.util.Map" resultType="long">
    ${sql}
  </select>
</mapper>
